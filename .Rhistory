?null
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- 1:5
makevector(x)
makeVector(x)
x <- m (1:2,2:3)
x <- matrix(1:4,2,2)
?solve
y <- solve(x)
y
x*y
x%*%y
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
?..
?->>
?!
makeCacheMatrix <- function(x = matrix()) {
# Initialising the object 'inverseMatrix' as an empty object
inverseMatrix <- NULL
# 'set' function caches the matrix y to the object x
set <- function(y){
x <<- y
inverseMatrix <<- NULL
}
# 'get' function returns the matrix
get <- function() x
# 'setInverse' function caches the 'inverse' object in 'inverseMatrix'
setInverse <- function(inverse) inverseMatrix <<- inverse
# 'getInverse' function returns the inverseMatrix
getInverse <- function() inverseMatrix
# returns the list of functions
list(set=set, get = get, setInverse = setInverse, getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
inverseMatrix <- x$getInverse ()
if(!is.null(inverseMatrix)) {
message ("getting cached data")
return (inverseMatrix)
}
data = x$get()
inverseMatrix = solve(data,...)
x$setInverse (inverseMatrix)
return(inverseMatrix)
}
makeCacheMatrix <- function(x = matrix()) {
# Initialising the object 'inverseMatrix' as an empty object
inverseMatrix <- NULL
# 'set' function caches the matrix y to the object x
set <- function(y){
x <<- y
inverseMatrix <<- NULL
}
# 'get' function returns the matrix
get <- function() x
# 'setInverse' function caches the 'inverse' object in 'inverseMatrix'
setInverse <- function(inverse) inverseMatrix <<- inverse
# 'getInverse' function returns the inverseMatrix
getInverse <- function() inverseMatrix
# returns the list of functions
list(set=set, get = get, setInverse = setInverse, getInverse = getInverse)
}
x
View(y)
View(x)
makeCacheMatrix(x)
cachesolve(x)
cacheSolve(x)
cachesolve(makeCacheMatrix(x))
cacheSolve(makeCacheMatrix(x))
cacheSolve(makeCacheMatrix(x))
clear
